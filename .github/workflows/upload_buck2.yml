name: Build, upload, and tag `buck2`

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  get_prelude_hash:
    name: Get the latest prelude hash
    runs-on: ubuntu-latest
    outputs:
      prelude_hash: ${{ steps.get_latest_prelude_hash.outputs.prelude_hash }}
    steps:
      - name: Shallow clone buck2-prelude
        run: git clone --depth=1 https://github.com/facebook/buck2-prelude
      - name: Get latest commit hash into prelude_hash
        id: get_latest_prelude_hash
        run: |
          mkdir artifacts/
          cd buck2-prelude/
          git rev-parse HEAD > ../artifacts/prelude_hash
          echo "prelude_hash=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"
      - name: Upload prelude_hash
        uses: actions/upload-artifact@v4
        with:
          path: artifacts/prelude_hash
          name: prelude_hash

  build:
    needs:
      - get_prelude_hash
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: 'ubuntu-22.04'
            triple: 'aarch64-unknown-linux-musl'
            cross: true
          - os: 'ubuntu-22.04'
            triple: 'aarch64-linux-android'
            cross: true
    runs-on: ${{ matrix.target.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: SebRollen/toml-action@v1.0.2
        id: read_rust_toolchain
        with:
          file: 'rust-toolchain'
          field: 'toolchain.channel'
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ steps.read_rust_toolchain.outputs.value }}
          targets: ${{ matrix.target.triple }}
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: buck2-upload
          key: ${{ matrix.target.triple }}
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r23c
          link-to-sdk: true
      - name: print ndk info
        shell: bash
        run: |
          find $ANDROID_HOME -type f -name 'aarch64-*' || true
          find ${{ steps.setup-ndk.outputs.ndk-path }} -type f -name 'aarch64-*' || true

      - name: Set variables
        id: set_variables
        shell: bash
        run: |
          echo "buck2_out=target/${{ matrix.target.triple }}/debug/buck2" >> "$GITHUB_OUTPUT"
          echo "buck2_zst=artifacts/buck2-${{ matrix.target.triple }}.zst" >> "$GITHUB_OUTPUT"
          echo "buck2_rust_project_out=target/${{ matrix.target.triple }}/debug/rust-project" >> "$GITHUB_OUTPUT"
          echo "buck2_rust_project_zst=artifacts/rust-project-${{ matrix.target.triple }}.zst" >> "$GITHUB_OUTPUT"
      - name: Build
        shell: bash
        env:
          RUSTFLAGS: "-C strip=debuginfo -C codegen-units=1"
        run: |
          # aarch64-linux builds need JEMALLOC_SYS_WITH_LG_PAGE=16
          # this is for e.g. linux running on apple silicon with native 16k pages
          # if [[ "${{ matrix.target.triple }}" == aarch64-unknown-linux* ]]; then
          #   export JEMALLOC_SYS_WITH_LG_PAGE=16
          # fi

          CARGO=cargo
          $CARGO build --bin buck2 --keep-going --bin rust-project --target ${{ matrix.target.triple }}
      - name: Sanity check with examples/with_prelude
        if: ${{ !matrix.target.cross }}
        shell: bash
        run: |
          BUCK2="$(pwd)/${{ steps.set_variables.outputs.buck2_out }}"
          cd examples/with_prelude
          "$BUCK2" build //rust/... //cpp/... //python/... -v=2
      - name: Move binary to artifacts/
        shell: bash
        run: |
          mkdir artifacts
          zstd -z ${{ steps.set_variables.outputs.buck2_out }} -o ${{ steps.set_variables.outputs.buck2_zst }}
          zstd -z ${{ steps.set_variables.outputs.buck2_rust_project_out }} -o ${{ steps.set_variables.outputs.buck2_rust_project_zst }}
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: buck2-${{ matrix.target.triple }}
          path: artifacts/

  release_latest:
    permissions:
      contents: write
    name: Release `latest` tag
    needs:
      - build
      - get_prelude_hash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Publish a new tag and upload all aritfacts from `build` and `get_prelude_hash`
      - uses: ./.github/actions/publish_tag
        with:
          tag: "latest"
          github_token: ${{ github.token }}
