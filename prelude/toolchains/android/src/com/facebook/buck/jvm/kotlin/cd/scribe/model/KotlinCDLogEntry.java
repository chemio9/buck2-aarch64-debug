/**
 * Autogenerated by Thrift Compiler (0.21.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.jvm.kotlin.cd.scribe.model;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.21.0)", date = "2025-02-03")
public class KotlinCDLogEntry implements org.apache.thrift.TBase<KotlinCDLogEntry, KotlinCDLogEntry._Fields>, java.io.Serializable, Cloneable, Comparable<KotlinCDLogEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KotlinCDLogEntry");

  private static final org.apache.thrift.protocol.TField EVENT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("event_time", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("target", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField SUBTARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("subtarget", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField COMPILER_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("compiler_version", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField WEIGHT_FIELD_DESC = new org.apache.thrift.protocol.TField("weight", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField BUILD_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("build_uuid", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EXECUTION_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("execution_platform", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NUM_JAVA_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_java_files", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField NUM_KOTLIN_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_kotlin_files", org.apache.thrift.protocol.TType.I64, (short)19);
  private static final org.apache.thrift.protocol.TField INCREMENTAL_FIELD_DESC = new org.apache.thrift.protocol.TField("incremental", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField KOTLINC_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("kotlinc_mode", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField CLASSPATH_CHANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("classpath_changes", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField EXTRAS_FIELD_DESC = new org.apache.thrift.protocol.TField("extras", org.apache.thrift.protocol.TType.STRING, (short)25);
  private static final org.apache.thrift.protocol.TField STEP_FIELD_DESC = new org.apache.thrift.protocol.TField("step", org.apache.thrift.protocol.TType.STRING, (short)26);
  private static final org.apache.thrift.protocol.TField LANGUAGE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("language_version", org.apache.thrift.protocol.TType.STRING, (short)28);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new KotlinCDLogEntryStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new KotlinCDLogEntryTupleSchemeFactory();

  public double event_time; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String target; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String subtarget; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String compiler_version; // optional
  public long time; // optional
  public long weight; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String build_uuid; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String execution_platform; // optional
  public long num_java_files; // optional
  public long num_kotlin_files; // optional
  public boolean incremental; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String kotlinc_mode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String classpath_changes; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String extras; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String step; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String language_version; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EVENT_TIME((short)4, "event_time"),
    TARGET((short)6, "target"),
    SUBTARGET((short)7, "subtarget"),
    COMPILER_VERSION((short)8, "compiler_version"),
    TIME((short)13, "time"),
    WEIGHT((short)14, "weight"),
    BUILD_UUID((short)16, "build_uuid"),
    EXECUTION_PLATFORM((short)17, "execution_platform"),
    NUM_JAVA_FILES((short)18, "num_java_files"),
    NUM_KOTLIN_FILES((short)19, "num_kotlin_files"),
    INCREMENTAL((short)20, "incremental"),
    KOTLINC_MODE((short)21, "kotlinc_mode"),
    CLASSPATH_CHANGES((short)22, "classpath_changes"),
    EXTRAS((short)25, "extras"),
    STEP((short)26, "step"),
    LANGUAGE_VERSION((short)28, "language_version");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 4: // EVENT_TIME
          return EVENT_TIME;
        case 6: // TARGET
          return TARGET;
        case 7: // SUBTARGET
          return SUBTARGET;
        case 8: // COMPILER_VERSION
          return COMPILER_VERSION;
        case 13: // TIME
          return TIME;
        case 14: // WEIGHT
          return WEIGHT;
        case 16: // BUILD_UUID
          return BUILD_UUID;
        case 17: // EXECUTION_PLATFORM
          return EXECUTION_PLATFORM;
        case 18: // NUM_JAVA_FILES
          return NUM_JAVA_FILES;
        case 19: // NUM_KOTLIN_FILES
          return NUM_KOTLIN_FILES;
        case 20: // INCREMENTAL
          return INCREMENTAL;
        case 21: // KOTLINC_MODE
          return KOTLINC_MODE;
        case 22: // CLASSPATH_CHANGES
          return CLASSPATH_CHANGES;
        case 25: // EXTRAS
          return EXTRAS;
        case 26: // STEP
          return STEP;
        case 28: // LANGUAGE_VERSION
          return LANGUAGE_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENT_TIME_ISSET_ID = 0;
  private static final int __TIME_ISSET_ID = 1;
  private static final int __WEIGHT_ISSET_ID = 2;
  private static final int __NUM_JAVA_FILES_ISSET_ID = 3;
  private static final int __NUM_KOTLIN_FILES_ISSET_ID = 4;
  private static final int __INCREMENTAL_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EVENT_TIME,_Fields.TARGET,_Fields.SUBTARGET,_Fields.COMPILER_VERSION,_Fields.TIME,_Fields.WEIGHT,_Fields.BUILD_UUID,_Fields.EXECUTION_PLATFORM,_Fields.NUM_JAVA_FILES,_Fields.NUM_KOTLIN_FILES,_Fields.INCREMENTAL,_Fields.KOTLINC_MODE,_Fields.CLASSPATH_CHANGES,_Fields.EXTRAS,_Fields.STEP,_Fields.LANGUAGE_VERSION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_TIME, new org.apache.thrift.meta_data.FieldMetaData("event_time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TARGET, new org.apache.thrift.meta_data.FieldMetaData("target", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBTARGET, new org.apache.thrift.meta_data.FieldMetaData("subtarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPILER_VERSION, new org.apache.thrift.meta_data.FieldMetaData("compiler_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.WEIGHT, new org.apache.thrift.meta_data.FieldMetaData("weight", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BUILD_UUID, new org.apache.thrift.meta_data.FieldMetaData("build_uuid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("execution_platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUM_JAVA_FILES, new org.apache.thrift.meta_data.FieldMetaData("num_java_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NUM_KOTLIN_FILES, new org.apache.thrift.meta_data.FieldMetaData("num_kotlin_files", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INCREMENTAL, new org.apache.thrift.meta_data.FieldMetaData("incremental", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.KOTLINC_MODE, new org.apache.thrift.meta_data.FieldMetaData("kotlinc_mode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASSPATH_CHANGES, new org.apache.thrift.meta_data.FieldMetaData("classpath_changes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTRAS, new org.apache.thrift.meta_data.FieldMetaData("extras", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STEP, new org.apache.thrift.meta_data.FieldMetaData("step", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LANGUAGE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("language_version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KotlinCDLogEntry.class, metaDataMap);
  }

  public KotlinCDLogEntry() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KotlinCDLogEntry(KotlinCDLogEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    this.event_time = other.event_time;
    if (other.isSetTarget()) {
      this.target = other.target;
    }
    if (other.isSetSubtarget()) {
      this.subtarget = other.subtarget;
    }
    if (other.isSetCompiler_version()) {
      this.compiler_version = other.compiler_version;
    }
    this.time = other.time;
    this.weight = other.weight;
    if (other.isSetBuild_uuid()) {
      this.build_uuid = other.build_uuid;
    }
    if (other.isSetExecution_platform()) {
      this.execution_platform = other.execution_platform;
    }
    this.num_java_files = other.num_java_files;
    this.num_kotlin_files = other.num_kotlin_files;
    this.incremental = other.incremental;
    if (other.isSetKotlinc_mode()) {
      this.kotlinc_mode = other.kotlinc_mode;
    }
    if (other.isSetClasspath_changes()) {
      this.classpath_changes = other.classpath_changes;
    }
    if (other.isSetExtras()) {
      this.extras = other.extras;
    }
    if (other.isSetStep()) {
      this.step = other.step;
    }
    if (other.isSetLanguage_version()) {
      this.language_version = other.language_version;
    }
  }

  @Override
  public KotlinCDLogEntry deepCopy() {
    return new KotlinCDLogEntry(this);
  }

  @Override
  public void clear() {
    setEvent_timeIsSet(false);
    this.event_time = 0.0;
    this.target = null;
    this.subtarget = null;
    this.compiler_version = null;
    setTimeIsSet(false);
    this.time = 0;
    setWeightIsSet(false);
    this.weight = 0;
    this.build_uuid = null;
    this.execution_platform = null;
    setNum_java_filesIsSet(false);
    this.num_java_files = 0;
    setNum_kotlin_filesIsSet(false);
    this.num_kotlin_files = 0;
    setIncrementalIsSet(false);
    this.incremental = false;
    this.kotlinc_mode = null;
    this.classpath_changes = null;
    this.extras = null;
    this.step = null;
    this.language_version = null;
  }

  public double getEvent_time() {
    return this.event_time;
  }

  public KotlinCDLogEntry setEvent_time(double event_time) {
    this.event_time = event_time;
    setEvent_timeIsSet(true);
    return this;
  }

  public void unsetEvent_time() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EVENT_TIME_ISSET_ID);
  }

  /** Returns true if field event_time is set (has been assigned a value) and false otherwise */
  public boolean isSetEvent_time() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EVENT_TIME_ISSET_ID);
  }

  public void setEvent_timeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EVENT_TIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTarget() {
    return this.target;
  }

  public KotlinCDLogEntry setTarget(@org.apache.thrift.annotation.Nullable java.lang.String target) {
    this.target = target;
    return this;
  }

  public void unsetTarget() {
    this.target = null;
  }

  /** Returns true if field target is set (has been assigned a value) and false otherwise */
  public boolean isSetTarget() {
    return this.target != null;
  }

  public void setTargetIsSet(boolean value) {
    if (!value) {
      this.target = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSubtarget() {
    return this.subtarget;
  }

  public KotlinCDLogEntry setSubtarget(@org.apache.thrift.annotation.Nullable java.lang.String subtarget) {
    this.subtarget = subtarget;
    return this;
  }

  public void unsetSubtarget() {
    this.subtarget = null;
  }

  /** Returns true if field subtarget is set (has been assigned a value) and false otherwise */
  public boolean isSetSubtarget() {
    return this.subtarget != null;
  }

  public void setSubtargetIsSet(boolean value) {
    if (!value) {
      this.subtarget = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCompiler_version() {
    return this.compiler_version;
  }

  public KotlinCDLogEntry setCompiler_version(@org.apache.thrift.annotation.Nullable java.lang.String compiler_version) {
    this.compiler_version = compiler_version;
    return this;
  }

  public void unsetCompiler_version() {
    this.compiler_version = null;
  }

  /** Returns true if field compiler_version is set (has been assigned a value) and false otherwise */
  public boolean isSetCompiler_version() {
    return this.compiler_version != null;
  }

  public void setCompiler_versionIsSet(boolean value) {
    if (!value) {
      this.compiler_version = null;
    }
  }

  public long getTime() {
    return this.time;
  }

  public KotlinCDLogEntry setTime(long time) {
    this.time = time;
    setTimeIsSet(true);
    return this;
  }

  public void unsetTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
  }

  public void setTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
  }

  public long getWeight() {
    return this.weight;
  }

  public KotlinCDLogEntry setWeight(long weight) {
    this.weight = weight;
    setWeightIsSet(true);
    return this;
  }

  public void unsetWeight() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  /** Returns true if field weight is set (has been assigned a value) and false otherwise */
  public boolean isSetWeight() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WEIGHT_ISSET_ID);
  }

  public void setWeightIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WEIGHT_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getBuild_uuid() {
    return this.build_uuid;
  }

  public KotlinCDLogEntry setBuild_uuid(@org.apache.thrift.annotation.Nullable java.lang.String build_uuid) {
    this.build_uuid = build_uuid;
    return this;
  }

  public void unsetBuild_uuid() {
    this.build_uuid = null;
  }

  /** Returns true if field build_uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetBuild_uuid() {
    return this.build_uuid != null;
  }

  public void setBuild_uuidIsSet(boolean value) {
    if (!value) {
      this.build_uuid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExecution_platform() {
    return this.execution_platform;
  }

  public KotlinCDLogEntry setExecution_platform(@org.apache.thrift.annotation.Nullable java.lang.String execution_platform) {
    this.execution_platform = execution_platform;
    return this;
  }

  public void unsetExecution_platform() {
    this.execution_platform = null;
  }

  /** Returns true if field execution_platform is set (has been assigned a value) and false otherwise */
  public boolean isSetExecution_platform() {
    return this.execution_platform != null;
  }

  public void setExecution_platformIsSet(boolean value) {
    if (!value) {
      this.execution_platform = null;
    }
  }

  public long getNum_java_files() {
    return this.num_java_files;
  }

  public KotlinCDLogEntry setNum_java_files(long num_java_files) {
    this.num_java_files = num_java_files;
    setNum_java_filesIsSet(true);
    return this;
  }

  public void unsetNum_java_files() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_JAVA_FILES_ISSET_ID);
  }

  /** Returns true if field num_java_files is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_java_files() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_JAVA_FILES_ISSET_ID);
  }

  public void setNum_java_filesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_JAVA_FILES_ISSET_ID, value);
  }

  public long getNum_kotlin_files() {
    return this.num_kotlin_files;
  }

  public KotlinCDLogEntry setNum_kotlin_files(long num_kotlin_files) {
    this.num_kotlin_files = num_kotlin_files;
    setNum_kotlin_filesIsSet(true);
    return this;
  }

  public void unsetNum_kotlin_files() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUM_KOTLIN_FILES_ISSET_ID);
  }

  /** Returns true if field num_kotlin_files is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_kotlin_files() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUM_KOTLIN_FILES_ISSET_ID);
  }

  public void setNum_kotlin_filesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUM_KOTLIN_FILES_ISSET_ID, value);
  }

  public boolean isIncremental() {
    return this.incremental;
  }

  public KotlinCDLogEntry setIncremental(boolean incremental) {
    this.incremental = incremental;
    setIncrementalIsSet(true);
    return this;
  }

  public void unsetIncremental() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCREMENTAL_ISSET_ID);
  }

  /** Returns true if field incremental is set (has been assigned a value) and false otherwise */
  public boolean isSetIncremental() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCREMENTAL_ISSET_ID);
  }

  public void setIncrementalIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCREMENTAL_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getKotlinc_mode() {
    return this.kotlinc_mode;
  }

  public KotlinCDLogEntry setKotlinc_mode(@org.apache.thrift.annotation.Nullable java.lang.String kotlinc_mode) {
    this.kotlinc_mode = kotlinc_mode;
    return this;
  }

  public void unsetKotlinc_mode() {
    this.kotlinc_mode = null;
  }

  /** Returns true if field kotlinc_mode is set (has been assigned a value) and false otherwise */
  public boolean isSetKotlinc_mode() {
    return this.kotlinc_mode != null;
  }

  public void setKotlinc_modeIsSet(boolean value) {
    if (!value) {
      this.kotlinc_mode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getClasspath_changes() {
    return this.classpath_changes;
  }

  public KotlinCDLogEntry setClasspath_changes(@org.apache.thrift.annotation.Nullable java.lang.String classpath_changes) {
    this.classpath_changes = classpath_changes;
    return this;
  }

  public void unsetClasspath_changes() {
    this.classpath_changes = null;
  }

  /** Returns true if field classpath_changes is set (has been assigned a value) and false otherwise */
  public boolean isSetClasspath_changes() {
    return this.classpath_changes != null;
  }

  public void setClasspath_changesIsSet(boolean value) {
    if (!value) {
      this.classpath_changes = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getExtras() {
    return this.extras;
  }

  public KotlinCDLogEntry setExtras(@org.apache.thrift.annotation.Nullable java.lang.String extras) {
    this.extras = extras;
    return this;
  }

  public void unsetExtras() {
    this.extras = null;
  }

  /** Returns true if field extras is set (has been assigned a value) and false otherwise */
  public boolean isSetExtras() {
    return this.extras != null;
  }

  public void setExtrasIsSet(boolean value) {
    if (!value) {
      this.extras = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStep() {
    return this.step;
  }

  public KotlinCDLogEntry setStep(@org.apache.thrift.annotation.Nullable java.lang.String step) {
    this.step = step;
    return this;
  }

  public void unsetStep() {
    this.step = null;
  }

  /** Returns true if field step is set (has been assigned a value) and false otherwise */
  public boolean isSetStep() {
    return this.step != null;
  }

  public void setStepIsSet(boolean value) {
    if (!value) {
      this.step = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLanguage_version() {
    return this.language_version;
  }

  public KotlinCDLogEntry setLanguage_version(@org.apache.thrift.annotation.Nullable java.lang.String language_version) {
    this.language_version = language_version;
    return this;
  }

  public void unsetLanguage_version() {
    this.language_version = null;
  }

  /** Returns true if field language_version is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage_version() {
    return this.language_version != null;
  }

  public void setLanguage_versionIsSet(boolean value) {
    if (!value) {
      this.language_version = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EVENT_TIME:
      if (value == null) {
        unsetEvent_time();
      } else {
        setEvent_time((java.lang.Double)value);
      }
      break;

    case TARGET:
      if (value == null) {
        unsetTarget();
      } else {
        setTarget((java.lang.String)value);
      }
      break;

    case SUBTARGET:
      if (value == null) {
        unsetSubtarget();
      } else {
        setSubtarget((java.lang.String)value);
      }
      break;

    case COMPILER_VERSION:
      if (value == null) {
        unsetCompiler_version();
      } else {
        setCompiler_version((java.lang.String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((java.lang.Long)value);
      }
      break;

    case WEIGHT:
      if (value == null) {
        unsetWeight();
      } else {
        setWeight((java.lang.Long)value);
      }
      break;

    case BUILD_UUID:
      if (value == null) {
        unsetBuild_uuid();
      } else {
        setBuild_uuid((java.lang.String)value);
      }
      break;

    case EXECUTION_PLATFORM:
      if (value == null) {
        unsetExecution_platform();
      } else {
        setExecution_platform((java.lang.String)value);
      }
      break;

    case NUM_JAVA_FILES:
      if (value == null) {
        unsetNum_java_files();
      } else {
        setNum_java_files((java.lang.Long)value);
      }
      break;

    case NUM_KOTLIN_FILES:
      if (value == null) {
        unsetNum_kotlin_files();
      } else {
        setNum_kotlin_files((java.lang.Long)value);
      }
      break;

    case INCREMENTAL:
      if (value == null) {
        unsetIncremental();
      } else {
        setIncremental((java.lang.Boolean)value);
      }
      break;

    case KOTLINC_MODE:
      if (value == null) {
        unsetKotlinc_mode();
      } else {
        setKotlinc_mode((java.lang.String)value);
      }
      break;

    case CLASSPATH_CHANGES:
      if (value == null) {
        unsetClasspath_changes();
      } else {
        setClasspath_changes((java.lang.String)value);
      }
      break;

    case EXTRAS:
      if (value == null) {
        unsetExtras();
      } else {
        setExtras((java.lang.String)value);
      }
      break;

    case STEP:
      if (value == null) {
        unsetStep();
      } else {
        setStep((java.lang.String)value);
      }
      break;

    case LANGUAGE_VERSION:
      if (value == null) {
        unsetLanguage_version();
      } else {
        setLanguage_version((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_TIME:
      return getEvent_time();

    case TARGET:
      return getTarget();

    case SUBTARGET:
      return getSubtarget();

    case COMPILER_VERSION:
      return getCompiler_version();

    case TIME:
      return getTime();

    case WEIGHT:
      return getWeight();

    case BUILD_UUID:
      return getBuild_uuid();

    case EXECUTION_PLATFORM:
      return getExecution_platform();

    case NUM_JAVA_FILES:
      return getNum_java_files();

    case NUM_KOTLIN_FILES:
      return getNum_kotlin_files();

    case INCREMENTAL:
      return isIncremental();

    case KOTLINC_MODE:
      return getKotlinc_mode();

    case CLASSPATH_CHANGES:
      return getClasspath_changes();

    case EXTRAS:
      return getExtras();

    case STEP:
      return getStep();

    case LANGUAGE_VERSION:
      return getLanguage_version();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EVENT_TIME:
      return isSetEvent_time();
    case TARGET:
      return isSetTarget();
    case SUBTARGET:
      return isSetSubtarget();
    case COMPILER_VERSION:
      return isSetCompiler_version();
    case TIME:
      return isSetTime();
    case WEIGHT:
      return isSetWeight();
    case BUILD_UUID:
      return isSetBuild_uuid();
    case EXECUTION_PLATFORM:
      return isSetExecution_platform();
    case NUM_JAVA_FILES:
      return isSetNum_java_files();
    case NUM_KOTLIN_FILES:
      return isSetNum_kotlin_files();
    case INCREMENTAL:
      return isSetIncremental();
    case KOTLINC_MODE:
      return isSetKotlinc_mode();
    case CLASSPATH_CHANGES:
      return isSetClasspath_changes();
    case EXTRAS:
      return isSetExtras();
    case STEP:
      return isSetStep();
    case LANGUAGE_VERSION:
      return isSetLanguage_version();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof KotlinCDLogEntry)
      return this.equals((KotlinCDLogEntry)that);
    return false;
  }

  public boolean equals(KotlinCDLogEntry that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_event_time = true && this.isSetEvent_time();
    boolean that_present_event_time = true && that.isSetEvent_time();
    if (this_present_event_time || that_present_event_time) {
      if (!(this_present_event_time && that_present_event_time))
        return false;
      if (this.event_time != that.event_time)
        return false;
    }

    boolean this_present_target = true && this.isSetTarget();
    boolean that_present_target = true && that.isSetTarget();
    if (this_present_target || that_present_target) {
      if (!(this_present_target && that_present_target))
        return false;
      if (!this.target.equals(that.target))
        return false;
    }

    boolean this_present_subtarget = true && this.isSetSubtarget();
    boolean that_present_subtarget = true && that.isSetSubtarget();
    if (this_present_subtarget || that_present_subtarget) {
      if (!(this_present_subtarget && that_present_subtarget))
        return false;
      if (!this.subtarget.equals(that.subtarget))
        return false;
    }

    boolean this_present_compiler_version = true && this.isSetCompiler_version();
    boolean that_present_compiler_version = true && that.isSetCompiler_version();
    if (this_present_compiler_version || that_present_compiler_version) {
      if (!(this_present_compiler_version && that_present_compiler_version))
        return false;
      if (!this.compiler_version.equals(that.compiler_version))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (this.time != that.time)
        return false;
    }

    boolean this_present_weight = true && this.isSetWeight();
    boolean that_present_weight = true && that.isSetWeight();
    if (this_present_weight || that_present_weight) {
      if (!(this_present_weight && that_present_weight))
        return false;
      if (this.weight != that.weight)
        return false;
    }

    boolean this_present_build_uuid = true && this.isSetBuild_uuid();
    boolean that_present_build_uuid = true && that.isSetBuild_uuid();
    if (this_present_build_uuid || that_present_build_uuid) {
      if (!(this_present_build_uuid && that_present_build_uuid))
        return false;
      if (!this.build_uuid.equals(that.build_uuid))
        return false;
    }

    boolean this_present_execution_platform = true && this.isSetExecution_platform();
    boolean that_present_execution_platform = true && that.isSetExecution_platform();
    if (this_present_execution_platform || that_present_execution_platform) {
      if (!(this_present_execution_platform && that_present_execution_platform))
        return false;
      if (!this.execution_platform.equals(that.execution_platform))
        return false;
    }

    boolean this_present_num_java_files = true && this.isSetNum_java_files();
    boolean that_present_num_java_files = true && that.isSetNum_java_files();
    if (this_present_num_java_files || that_present_num_java_files) {
      if (!(this_present_num_java_files && that_present_num_java_files))
        return false;
      if (this.num_java_files != that.num_java_files)
        return false;
    }

    boolean this_present_num_kotlin_files = true && this.isSetNum_kotlin_files();
    boolean that_present_num_kotlin_files = true && that.isSetNum_kotlin_files();
    if (this_present_num_kotlin_files || that_present_num_kotlin_files) {
      if (!(this_present_num_kotlin_files && that_present_num_kotlin_files))
        return false;
      if (this.num_kotlin_files != that.num_kotlin_files)
        return false;
    }

    boolean this_present_incremental = true && this.isSetIncremental();
    boolean that_present_incremental = true && that.isSetIncremental();
    if (this_present_incremental || that_present_incremental) {
      if (!(this_present_incremental && that_present_incremental))
        return false;
      if (this.incremental != that.incremental)
        return false;
    }

    boolean this_present_kotlinc_mode = true && this.isSetKotlinc_mode();
    boolean that_present_kotlinc_mode = true && that.isSetKotlinc_mode();
    if (this_present_kotlinc_mode || that_present_kotlinc_mode) {
      if (!(this_present_kotlinc_mode && that_present_kotlinc_mode))
        return false;
      if (!this.kotlinc_mode.equals(that.kotlinc_mode))
        return false;
    }

    boolean this_present_classpath_changes = true && this.isSetClasspath_changes();
    boolean that_present_classpath_changes = true && that.isSetClasspath_changes();
    if (this_present_classpath_changes || that_present_classpath_changes) {
      if (!(this_present_classpath_changes && that_present_classpath_changes))
        return false;
      if (!this.classpath_changes.equals(that.classpath_changes))
        return false;
    }

    boolean this_present_extras = true && this.isSetExtras();
    boolean that_present_extras = true && that.isSetExtras();
    if (this_present_extras || that_present_extras) {
      if (!(this_present_extras && that_present_extras))
        return false;
      if (!this.extras.equals(that.extras))
        return false;
    }

    boolean this_present_step = true && this.isSetStep();
    boolean that_present_step = true && that.isSetStep();
    if (this_present_step || that_present_step) {
      if (!(this_present_step && that_present_step))
        return false;
      if (!this.step.equals(that.step))
        return false;
    }

    boolean this_present_language_version = true && this.isSetLanguage_version();
    boolean that_present_language_version = true && that.isSetLanguage_version();
    if (this_present_language_version || that_present_language_version) {
      if (!(this_present_language_version && that_present_language_version))
        return false;
      if (!this.language_version.equals(that.language_version))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEvent_time()) ? 131071 : 524287);
    if (isSetEvent_time())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(event_time);

    hashCode = hashCode * 8191 + ((isSetTarget()) ? 131071 : 524287);
    if (isSetTarget())
      hashCode = hashCode * 8191 + target.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubtarget()) ? 131071 : 524287);
    if (isSetSubtarget())
      hashCode = hashCode * 8191 + subtarget.hashCode();

    hashCode = hashCode * 8191 + ((isSetCompiler_version()) ? 131071 : 524287);
    if (isSetCompiler_version())
      hashCode = hashCode * 8191 + compiler_version.hashCode();

    hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
    if (isSetTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(time);

    hashCode = hashCode * 8191 + ((isSetWeight()) ? 131071 : 524287);
    if (isSetWeight())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(weight);

    hashCode = hashCode * 8191 + ((isSetBuild_uuid()) ? 131071 : 524287);
    if (isSetBuild_uuid())
      hashCode = hashCode * 8191 + build_uuid.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecution_platform()) ? 131071 : 524287);
    if (isSetExecution_platform())
      hashCode = hashCode * 8191 + execution_platform.hashCode();

    hashCode = hashCode * 8191 + ((isSetNum_java_files()) ? 131071 : 524287);
    if (isSetNum_java_files())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_java_files);

    hashCode = hashCode * 8191 + ((isSetNum_kotlin_files()) ? 131071 : 524287);
    if (isSetNum_kotlin_files())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(num_kotlin_files);

    hashCode = hashCode * 8191 + ((isSetIncremental()) ? 131071 : 524287);
    if (isSetIncremental())
      hashCode = hashCode * 8191 + ((incremental) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetKotlinc_mode()) ? 131071 : 524287);
    if (isSetKotlinc_mode())
      hashCode = hashCode * 8191 + kotlinc_mode.hashCode();

    hashCode = hashCode * 8191 + ((isSetClasspath_changes()) ? 131071 : 524287);
    if (isSetClasspath_changes())
      hashCode = hashCode * 8191 + classpath_changes.hashCode();

    hashCode = hashCode * 8191 + ((isSetExtras()) ? 131071 : 524287);
    if (isSetExtras())
      hashCode = hashCode * 8191 + extras.hashCode();

    hashCode = hashCode * 8191 + ((isSetStep()) ? 131071 : 524287);
    if (isSetStep())
      hashCode = hashCode * 8191 + step.hashCode();

    hashCode = hashCode * 8191 + ((isSetLanguage_version()) ? 131071 : 524287);
    if (isSetLanguage_version())
      hashCode = hashCode * 8191 + language_version.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(KotlinCDLogEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEvent_time(), other.isSetEvent_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvent_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.event_time, other.event_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTarget(), other.isSetTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.target, other.target);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSubtarget(), other.isSetSubtarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubtarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subtarget, other.subtarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCompiler_version(), other.isSetCompiler_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompiler_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compiler_version, other.compiler_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTime(), other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetWeight(), other.isSetWeight());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeight()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weight, other.weight);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBuild_uuid(), other.isSetBuild_uuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuild_uuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.build_uuid, other.build_uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExecution_platform(), other.isSetExecution_platform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecution_platform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execution_platform, other.execution_platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_java_files(), other.isSetNum_java_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_java_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_java_files, other.num_java_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNum_kotlin_files(), other.isSetNum_kotlin_files());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_kotlin_files()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_kotlin_files, other.num_kotlin_files);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIncremental(), other.isSetIncremental());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncremental()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.incremental, other.incremental);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetKotlinc_mode(), other.isSetKotlinc_mode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKotlinc_mode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.kotlinc_mode, other.kotlinc_mode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetClasspath_changes(), other.isSetClasspath_changes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClasspath_changes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classpath_changes, other.classpath_changes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExtras(), other.isSetExtras());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtras()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extras, other.extras);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStep(), other.isSetStep());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStep()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.step, other.step);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLanguage_version(), other.isSetLanguage_version());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage_version()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.language_version, other.language_version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("KotlinCDLogEntry(");
    boolean first = true;

    if (isSetEvent_time()) {
      sb.append("event_time:");
      sb.append(this.event_time);
      first = false;
    }
    if (isSetTarget()) {
      if (!first) sb.append(", ");
      sb.append("target:");
      if (this.target == null) {
        sb.append("null");
      } else {
        sb.append(this.target);
      }
      first = false;
    }
    if (isSetSubtarget()) {
      if (!first) sb.append(", ");
      sb.append("subtarget:");
      if (this.subtarget == null) {
        sb.append("null");
      } else {
        sb.append(this.subtarget);
      }
      first = false;
    }
    if (isSetCompiler_version()) {
      if (!first) sb.append(", ");
      sb.append("compiler_version:");
      if (this.compiler_version == null) {
        sb.append("null");
      } else {
        sb.append(this.compiler_version);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
    }
    if (isSetWeight()) {
      if (!first) sb.append(", ");
      sb.append("weight:");
      sb.append(this.weight);
      first = false;
    }
    if (isSetBuild_uuid()) {
      if (!first) sb.append(", ");
      sb.append("build_uuid:");
      if (this.build_uuid == null) {
        sb.append("null");
      } else {
        sb.append(this.build_uuid);
      }
      first = false;
    }
    if (isSetExecution_platform()) {
      if (!first) sb.append(", ");
      sb.append("execution_platform:");
      if (this.execution_platform == null) {
        sb.append("null");
      } else {
        sb.append(this.execution_platform);
      }
      first = false;
    }
    if (isSetNum_java_files()) {
      if (!first) sb.append(", ");
      sb.append("num_java_files:");
      sb.append(this.num_java_files);
      first = false;
    }
    if (isSetNum_kotlin_files()) {
      if (!first) sb.append(", ");
      sb.append("num_kotlin_files:");
      sb.append(this.num_kotlin_files);
      first = false;
    }
    if (isSetIncremental()) {
      if (!first) sb.append(", ");
      sb.append("incremental:");
      sb.append(this.incremental);
      first = false;
    }
    if (isSetKotlinc_mode()) {
      if (!first) sb.append(", ");
      sb.append("kotlinc_mode:");
      if (this.kotlinc_mode == null) {
        sb.append("null");
      } else {
        sb.append(this.kotlinc_mode);
      }
      first = false;
    }
    if (isSetClasspath_changes()) {
      if (!first) sb.append(", ");
      sb.append("classpath_changes:");
      if (this.classpath_changes == null) {
        sb.append("null");
      } else {
        sb.append(this.classpath_changes);
      }
      first = false;
    }
    if (isSetExtras()) {
      if (!first) sb.append(", ");
      sb.append("extras:");
      if (this.extras == null) {
        sb.append("null");
      } else {
        sb.append(this.extras);
      }
      first = false;
    }
    if (isSetStep()) {
      if (!first) sb.append(", ");
      sb.append("step:");
      if (this.step == null) {
        sb.append("null");
      } else {
        sb.append(this.step);
      }
      first = false;
    }
    if (isSetLanguage_version()) {
      if (!first) sb.append(", ");
      sb.append("language_version:");
      if (this.language_version == null) {
        sb.append("null");
      } else {
        sb.append(this.language_version);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KotlinCDLogEntryStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public KotlinCDLogEntryStandardScheme getScheme() {
      return new KotlinCDLogEntryStandardScheme();
    }
  }

  private static class KotlinCDLogEntryStandardScheme extends org.apache.thrift.scheme.StandardScheme<KotlinCDLogEntry> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, KotlinCDLogEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 4: // EVENT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.event_time = iprot.readDouble();
              struct.setEvent_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.target = iprot.readString();
              struct.setTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUBTARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subtarget = iprot.readString();
              struct.setSubtargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPILER_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.compiler_version = iprot.readString();
              struct.setCompiler_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.time = iprot.readI64();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // WEIGHT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.weight = iprot.readI64();
              struct.setWeightIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // BUILD_UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.build_uuid = iprot.readString();
              struct.setBuild_uuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EXECUTION_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execution_platform = iprot.readString();
              struct.setExecution_platformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NUM_JAVA_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_java_files = iprot.readI64();
              struct.setNum_java_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // NUM_KOTLIN_FILES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.num_kotlin_files = iprot.readI64();
              struct.setNum_kotlin_filesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // INCREMENTAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.incremental = iprot.readBool();
              struct.setIncrementalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // KOTLINC_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.kotlinc_mode = iprot.readString();
              struct.setKotlinc_modeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CLASSPATH_CHANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.classpath_changes = iprot.readString();
              struct.setClasspath_changesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // EXTRAS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.extras = iprot.readString();
              struct.setExtrasIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // STEP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.step = iprot.readString();
              struct.setStepIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // LANGUAGE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.language_version = iprot.readString();
              struct.setLanguage_versionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, KotlinCDLogEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEvent_time()) {
        oprot.writeFieldBegin(EVENT_TIME_FIELD_DESC);
        oprot.writeDouble(struct.event_time);
        oprot.writeFieldEnd();
      }
      if (struct.target != null) {
        if (struct.isSetTarget()) {
          oprot.writeFieldBegin(TARGET_FIELD_DESC);
          oprot.writeString(struct.target);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subtarget != null) {
        if (struct.isSetSubtarget()) {
          oprot.writeFieldBegin(SUBTARGET_FIELD_DESC);
          oprot.writeString(struct.subtarget);
          oprot.writeFieldEnd();
        }
      }
      if (struct.compiler_version != null) {
        if (struct.isSetCompiler_version()) {
          oprot.writeFieldBegin(COMPILER_VERSION_FIELD_DESC);
          oprot.writeString(struct.compiler_version);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTime()) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeight()) {
        oprot.writeFieldBegin(WEIGHT_FIELD_DESC);
        oprot.writeI64(struct.weight);
        oprot.writeFieldEnd();
      }
      if (struct.build_uuid != null) {
        if (struct.isSetBuild_uuid()) {
          oprot.writeFieldBegin(BUILD_UUID_FIELD_DESC);
          oprot.writeString(struct.build_uuid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execution_platform != null) {
        if (struct.isSetExecution_platform()) {
          oprot.writeFieldBegin(EXECUTION_PLATFORM_FIELD_DESC);
          oprot.writeString(struct.execution_platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNum_java_files()) {
        oprot.writeFieldBegin(NUM_JAVA_FILES_FIELD_DESC);
        oprot.writeI64(struct.num_java_files);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNum_kotlin_files()) {
        oprot.writeFieldBegin(NUM_KOTLIN_FILES_FIELD_DESC);
        oprot.writeI64(struct.num_kotlin_files);
        oprot.writeFieldEnd();
      }
      if (struct.isSetIncremental()) {
        oprot.writeFieldBegin(INCREMENTAL_FIELD_DESC);
        oprot.writeBool(struct.incremental);
        oprot.writeFieldEnd();
      }
      if (struct.kotlinc_mode != null) {
        if (struct.isSetKotlinc_mode()) {
          oprot.writeFieldBegin(KOTLINC_MODE_FIELD_DESC);
          oprot.writeString(struct.kotlinc_mode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.classpath_changes != null) {
        if (struct.isSetClasspath_changes()) {
          oprot.writeFieldBegin(CLASSPATH_CHANGES_FIELD_DESC);
          oprot.writeString(struct.classpath_changes);
          oprot.writeFieldEnd();
        }
      }
      if (struct.extras != null) {
        if (struct.isSetExtras()) {
          oprot.writeFieldBegin(EXTRAS_FIELD_DESC);
          oprot.writeString(struct.extras);
          oprot.writeFieldEnd();
        }
      }
      if (struct.step != null) {
        if (struct.isSetStep()) {
          oprot.writeFieldBegin(STEP_FIELD_DESC);
          oprot.writeString(struct.step);
          oprot.writeFieldEnd();
        }
      }
      if (struct.language_version != null) {
        if (struct.isSetLanguage_version()) {
          oprot.writeFieldBegin(LANGUAGE_VERSION_FIELD_DESC);
          oprot.writeString(struct.language_version);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KotlinCDLogEntryTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public KotlinCDLogEntryTupleScheme getScheme() {
      return new KotlinCDLogEntryTupleScheme();
    }
  }

  private static class KotlinCDLogEntryTupleScheme extends org.apache.thrift.scheme.TupleScheme<KotlinCDLogEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KotlinCDLogEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEvent_time()) {
        optionals.set(0);
      }
      if (struct.isSetTarget()) {
        optionals.set(1);
      }
      if (struct.isSetSubtarget()) {
        optionals.set(2);
      }
      if (struct.isSetCompiler_version()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetWeight()) {
        optionals.set(5);
      }
      if (struct.isSetBuild_uuid()) {
        optionals.set(6);
      }
      if (struct.isSetExecution_platform()) {
        optionals.set(7);
      }
      if (struct.isSetNum_java_files()) {
        optionals.set(8);
      }
      if (struct.isSetNum_kotlin_files()) {
        optionals.set(9);
      }
      if (struct.isSetIncremental()) {
        optionals.set(10);
      }
      if (struct.isSetKotlinc_mode()) {
        optionals.set(11);
      }
      if (struct.isSetClasspath_changes()) {
        optionals.set(12);
      }
      if (struct.isSetExtras()) {
        optionals.set(13);
      }
      if (struct.isSetStep()) {
        optionals.set(14);
      }
      if (struct.isSetLanguage_version()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetEvent_time()) {
        oprot.writeDouble(struct.event_time);
      }
      if (struct.isSetTarget()) {
        oprot.writeString(struct.target);
      }
      if (struct.isSetSubtarget()) {
        oprot.writeString(struct.subtarget);
      }
      if (struct.isSetCompiler_version()) {
        oprot.writeString(struct.compiler_version);
      }
      if (struct.isSetTime()) {
        oprot.writeI64(struct.time);
      }
      if (struct.isSetWeight()) {
        oprot.writeI64(struct.weight);
      }
      if (struct.isSetBuild_uuid()) {
        oprot.writeString(struct.build_uuid);
      }
      if (struct.isSetExecution_platform()) {
        oprot.writeString(struct.execution_platform);
      }
      if (struct.isSetNum_java_files()) {
        oprot.writeI64(struct.num_java_files);
      }
      if (struct.isSetNum_kotlin_files()) {
        oprot.writeI64(struct.num_kotlin_files);
      }
      if (struct.isSetIncremental()) {
        oprot.writeBool(struct.incremental);
      }
      if (struct.isSetKotlinc_mode()) {
        oprot.writeString(struct.kotlinc_mode);
      }
      if (struct.isSetClasspath_changes()) {
        oprot.writeString(struct.classpath_changes);
      }
      if (struct.isSetExtras()) {
        oprot.writeString(struct.extras);
      }
      if (struct.isSetStep()) {
        oprot.writeString(struct.step);
      }
      if (struct.isSetLanguage_version()) {
        oprot.writeString(struct.language_version);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KotlinCDLogEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.event_time = iprot.readDouble();
        struct.setEvent_timeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.target = iprot.readString();
        struct.setTargetIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subtarget = iprot.readString();
        struct.setSubtargetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.compiler_version = iprot.readString();
        struct.setCompiler_versionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readI64();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.weight = iprot.readI64();
        struct.setWeightIsSet(true);
      }
      if (incoming.get(6)) {
        struct.build_uuid = iprot.readString();
        struct.setBuild_uuidIsSet(true);
      }
      if (incoming.get(7)) {
        struct.execution_platform = iprot.readString();
        struct.setExecution_platformIsSet(true);
      }
      if (incoming.get(8)) {
        struct.num_java_files = iprot.readI64();
        struct.setNum_java_filesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.num_kotlin_files = iprot.readI64();
        struct.setNum_kotlin_filesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.incremental = iprot.readBool();
        struct.setIncrementalIsSet(true);
      }
      if (incoming.get(11)) {
        struct.kotlinc_mode = iprot.readString();
        struct.setKotlinc_modeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.classpath_changes = iprot.readString();
        struct.setClasspath_changesIsSet(true);
      }
      if (incoming.get(13)) {
        struct.extras = iprot.readString();
        struct.setExtrasIsSet(true);
      }
      if (incoming.get(14)) {
        struct.step = iprot.readString();
        struct.setStepIsSet(true);
      }
      if (incoming.get(15)) {
        struct.language_version = iprot.readString();
        struct.setLanguage_versionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

